#package.xml file is recreated on the fly by Copado, no need to track unnecessary changes of this file
package.xml

#if you are not going to customize a managed package, you can keep your repository clean by ignoring 
#all files for that package.
#if you will be customizing managed packages, make sure that the same version of the package 
#is installed on all your environments, so that deployments will only update existing 
#managed components. Creation of managed components is not permitted by the API.
# below is an example on how to ignore all components of the "copado" managed package.
*copado__*

#profiles and permission sets are complex Files. If your Org's metadata and Git are in sync, 
#you can track incremental changes on Profiles and Permission sets using Copado "commit files" functionality.
#Otherwise ignore profiles and permission sets until you are ready for it. 
#You can deploy profiles and permission sets using Copado Deployer steps: Full profiles and Full Permission sets.
#Below is how to ignore them
profiles/*
permissionsets/*

#Flow definitions are read only for the Api, they get created automatically, therefore no need to track them.
#As from Copado v7, you can commit and deploy Process Builder Flows. For such actions, you need to select the Flow 
#without version number and the FlowDefinition, therefore FlowDefinitions shouldn't be in the gitignore file.
#flowDefinitions/*
#Translations are complex since get updated indirectly across multiple files, they can make a deployment fail
#if a field is translated in source and it doesn't exist on destination. 
#If you are committing incrementally new fields and new Translations you can track them in Git, just be careful. 
#If you choose  to ignore them in Git, you can always create a deployment with the Copado Deployer "Translation" Step. 
#translations/*
#objectTranslations/*


#Sites which has Domain mapping has environment specific information. 
#Make sure you setup Copado Environment Variables to make sites config files environment agnostic.
#Until the above is achieved, you can ignore them as follows
#sites/*
#siteDotComSites/*
#Managed packages can trigger the installation or uninstallation of applications, is recommended to manage this outside git
installedPackages/*
